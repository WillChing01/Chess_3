#ifndef MAGIC_H_INCLUDED
#define MAGIC_H_INCLUDED

//b stores occupied squares (any piece type/colour).

typedef const unsigned long long C64;

const U64 rookMasks[64]=
{
	C64(0x000101010101017E), C64(0x000202020202027C), C64(0x000404040404047A), C64(0x0008080808080876),
	C64(0x001010101010106E), C64(0x002020202020205E), C64(0x004040404040403E), C64(0x008080808080807E),
	C64(0x0001010101017E00), C64(0x0002020202027C00), C64(0x0004040404047A00), C64(0x0008080808087600),
	C64(0x0010101010106E00), C64(0x0020202020205E00), C64(0x0040404040403E00), C64(0x0080808080807E00),
	C64(0x00010101017E0100), C64(0x00020202027C0200), C64(0x00040404047A0400), C64(0x0008080808760800),
	C64(0x00101010106E1000), C64(0x00202020205E2000), C64(0x00404040403E4000), C64(0x00808080807E8000),
	C64(0x000101017E010100), C64(0x000202027C020200), C64(0x000404047A040400), C64(0x0008080876080800),
	C64(0x001010106E101000), C64(0x002020205E202000), C64(0x004040403E404000), C64(0x008080807E808000),
	C64(0x0001017E01010100), C64(0x0002027C02020200), C64(0x0004047A04040400), C64(0x0008087608080800),
	C64(0x0010106E10101000), C64(0x0020205E20202000), C64(0x0040403E40404000), C64(0x0080807E80808000),
	C64(0x00017E0101010100), C64(0x00027C0202020200), C64(0x00047A0404040400), C64(0x0008760808080800),
	C64(0x00106E1010101000), C64(0x00205E2020202000), C64(0x00403E4040404000), C64(0x00807E8080808000),
	C64(0x007E010101010100), C64(0x007C020202020200), C64(0x007A040404040400), C64(0x0076080808080800),
	C64(0x006E101010101000), C64(0x005E202020202000), C64(0x003E404040404000), C64(0x007E808080808000),
	C64(0x7E01010101010100), C64(0x7C02020202020200), C64(0x7A04040404040400), C64(0x7608080808080800),
	C64(0x6E10101010101000), C64(0x5E20202020202000), C64(0x3E40404040404000), C64(0x7E80808080808000)
};

const U64 rookMagics[64]={};

const U64 bishopMasks[64]=
{
	C64(0x0040201008040200), C64(0x0000402010080400), C64(0x0000004020100A00), C64(0x0000000040221400),
	C64(0x0000000002442800), C64(0x0000000204085000), C64(0x0000020408102000), C64(0x0002040810204000),
	C64(0x0020100804020000), C64(0x0040201008040000), C64(0x00004020100A0000), C64(0x0000004022140000),
	C64(0x0000000244280000), C64(0x0000020408500000), C64(0x0002040810200000), C64(0x0004081020400000),
	C64(0x0010080402000200), C64(0x0020100804000400), C64(0x004020100A000A00), C64(0x0000402214001400),
	C64(0x0000024428002800), C64(0x0002040850005000), C64(0x0004081020002000), C64(0x0008102040004000),
	C64(0x0008040200020400), C64(0x0010080400040800), C64(0x0020100A000A1000), C64(0x0040221400142200),
	C64(0x0002442800284400), C64(0x0004085000500800), C64(0x0008102000201000), C64(0x0010204000402000),
	C64(0x0004020002040800), C64(0x0008040004081000), C64(0x00100A000A102000), C64(0x0022140014224000),
	C64(0x0044280028440200), C64(0x0008500050080400), C64(0x0010200020100800), C64(0x0020400040201000),
	C64(0x0002000204081000), C64(0x0004000408102000), C64(0x000A000A10204000), C64(0x0014001422400000),
	C64(0x0028002844020000), C64(0x0050005008040200), C64(0x0020002010080400), C64(0x0040004020100800),
	C64(0x0000020408102000), C64(0x0000040810204000), C64(0x00000A1020400000), C64(0x0000142240000000),
	C64(0x0000284402000000), C64(0x0000500804020000), C64(0x0000201008040200), C64(0x0000402010080400),
	C64(0x0002040810204000), C64(0x0004081020400000), C64(0x000A102040000000), C64(0x0014224000000000),
	C64(0x0028440200000000), C64(0x0050080402000000), C64(0x0020100804020000), C64(0x0040201008040200)
};

const U64 bishopMagics[64]={};

U64 rookMagicMoves[64][4096]={};
U64 bishopMagicMoves[64][512]={};

void populateMagicRookTables()
{
    for (int square=0;square<64;square++)
    {
        for (int i=0;i<4096;i++)
        {
            int x = i;
            U64 temp = rookMasks[square];
            while (x!=0)
            {
                int lsb = popLSB(temp);
                if (x%2==1) {rookMagicMoves[square][i] |= convertToBitboard(lsb);}
                x/=2;
            }
        }
    }
}

void populateMagicBishopTables()
{
    for (int square=0;square<64;square++)
    {
        for (int i=0;i<512;i++)
        {
            int x = i;
            U64 temp = bishopMasks[square];
            while (x!=0)
            {
                int lsb = popLSB(temp);
                if (x%2==1) {bishopMagicMoves[square][i] |= convertToBitboard(lsb);}
                x/=2;
            }
        }
    }
}

void populateMagicTables()
{
    populateMagicRookTables();
    populateMagicBishopTables();
}

inline U64 magicRookAttacks(U64 b, int square)
{
    b &= rookMasks[square];
    b *= rookMagics[square];
    b >>= 52;
    return rookMagicMoves[square][b];
}

inline U64 magicBishopAttacks(U64 b, int square)
{
    b &= bishopMasks[square];
    b *= bishopMagics[square];
    b >>= 55;
    return bishopMagicMoves[square][b];
}

inline U64 magicQueenAttacks(U64 b, int square)
{
    return (U64)(magicRookAttacks(b, square) | magicBishopAttacks(b, square));
}

#endif // MAGIC_H_INCLUDED
